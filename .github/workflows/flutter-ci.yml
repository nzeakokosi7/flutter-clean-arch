name: Flutter CI

# This workflow is triggered on pushes to the repository.

on:
  push:
    branches:
      - master

    # on: push    # Default will running for every branch.

jobs:
  build:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:

      - name: Create and populate .env file
        env:
          API_BASE_URL_DEV: ${{ secrets.API_BASE_URL_DEV }}
          API_BASE_URL_PROD: ${{ secrets.API_BASE_URL_PROD }}
        run: |
          touch .env
          echo API_BASE_URL_DEV="$API_BASE_URL_DEV" >> .env
          echo API_BASE_URL_PROD="$API_BASE_URL_PROD" >> .env
          
          echo "cat .env"
          cat .env
          
          echo "ls -a ."
          ls -a .
          
          echo "ls -a ${{ github.workspace }}"
          ls -a ${{ github.workspace }}
        shell: bash

      # Setup Java environment in order to build the Android app.
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # Setup the flutter environment.
      - uses: subosito/flutter-action@v1
        with:
          channel: 'beta' # 'dev', 'alpha', default to: 'stable'
          # flutter-version: '1.12.x' # you can also specify exact version of flutter.

      # Get flutter dependencies.
      - run: flutter pub get

      # Generate mock classes for tests.
      - run: dart run build_runner build

      # Check for any formatting issues in the code.
      - run: flutter format --set-exit-if-changed .

      # Statically analyze the Dart code for any errors.
      - run: flutter analyze .

      #      # Run widget tests for our flutter project.
      - run: flutter test

      # Build apk.
      - run: flutter build apk

      # Upload generated apk to the artifacts.
      - uses: actions/upload-artifact@v2
        with:
          name: app-release.apk
          path: build/app/outputs/apk/release/app-release.apk