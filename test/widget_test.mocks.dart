// Mocks generated by Mockito 5.1.0 from annotations
// in wayve_test_app/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i6;

import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:wayve_test_app/core/ui/navigation/navigation.dart' as _i3;
import 'package:wayve_test_app/features/user_status/domain/entities/user_entity.dart'
    as _i5;
import 'package:wayve_test_app/features/user_status/presentation/view_models/user_view_model.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>> extends _i2.Fake
    implements _i1.GlobalKey<T> {}

class _FakeBuildContext_1 extends _i2.Fake implements _i1.BuildContext {}

class _FakeScrollController_2 extends _i2.Fake implements _i1.ScrollController {
}

class _FakeNavigationService_3 extends _i2.Fake
    implements _i3.NavigationService {}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i2.Mock implements _i3.NavigationService {
  MockNavigationService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(Invocation.getter(#navigatorKey),
              returnValue: _FakeGlobalKey_0<_i1.NavigatorState>())
          as _i1.GlobalKey<_i1.NavigatorState>);
  @override
  _i1.BuildContext get appContext =>
      (super.noSuchMethod(Invocation.getter(#appContext),
          returnValue: _FakeBuildContext_1()) as _i1.BuildContext);
  @override
  void navigate(dynamic context, dynamic routeSettings) =>
      super.noSuchMethod(Invocation.method(#navigate, [context, routeSettings]),
          returnValueForMissingStub: null);
}

/// A class which mocks [UserViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserViewModel extends _i2.Mock implements _i4.UserViewModel {
  MockUserViewModel() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.ScrollController get scrollController =>
      (super.noSuchMethod(Invocation.getter(#scrollController),
          returnValue: _FakeScrollController_2()) as _i1.ScrollController);
  @override
  set scrollController(_i1.ScrollController? _scrollController) => super
      .noSuchMethod(Invocation.setter(#scrollController, _scrollController),
          returnValueForMissingStub: null);
  @override
  int get pager =>
      (super.noSuchMethod(Invocation.getter(#pager), returnValue: 0) as int);
  @override
  set pager(dynamic intValue) =>
      super.noSuchMethod(Invocation.setter(#pager, intValue),
          returnValueForMissingStub: null);
  @override
  bool get isNextAvailable => (super
          .noSuchMethod(Invocation.getter(#isNextAvailable), returnValue: false)
      as bool);
  @override
  set isNextAvailable(dynamic val) =>
      super.noSuchMethod(Invocation.setter(#isNextAvailable, val),
          returnValueForMissingStub: null);
  @override
  bool get isFetchingNextPage =>
      (super.noSuchMethod(Invocation.getter(#isFetchingNextPage),
          returnValue: false) as bool);
  @override
  set isFetchingNextPage(dynamic val) =>
      super.noSuchMethod(Invocation.setter(#isFetchingNextPage, val),
          returnValueForMissingStub: null);
  @override
  List<_i5.UserEntity> get activeUserList =>
      (super.noSuchMethod(Invocation.getter(#activeUserList),
          returnValue: <_i5.UserEntity>[]) as List<_i5.UserEntity>);
  @override
  set activeUserList(dynamic value) =>
      super.noSuchMethod(Invocation.setter(#activeUserList, value),
          returnValueForMissingStub: null);
  @override
  List<_i5.UserEntity> get inactiveUserList =>
      (super.noSuchMethod(Invocation.getter(#inactiveUserList),
          returnValue: <_i5.UserEntity>[]) as List<_i5.UserEntity>);
  @override
  set inactiveUserList(dynamic value) =>
      super.noSuchMethod(Invocation.setter(#inactiveUserList, value),
          returnValueForMissingStub: null);
  @override
  Map<int, List<_i5.UserEntity>> get userActivityPageMap =>
      (super.noSuchMethod(Invocation.getter(#userActivityPageMap),
              returnValue: <int, List<_i5.UserEntity>>{})
          as Map<int, List<_i5.UserEntity>>);
  @override
  _i3.NavigationService get navigationService =>
      (super.noSuchMethod(Invocation.getter(#navigationService),
          returnValue: _FakeNavigationService_3()) as _i3.NavigationService);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  set disposed(bool? _disposed) =>
      super.noSuchMethod(Invocation.setter(#disposed, _disposed),
          returnValueForMissingStub: null);
  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  set isLoading(bool? val) =>
      super.noSuchMethod(Invocation.setter(#isLoading, val),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void pagination() => super.noSuchMethod(Invocation.method(#pagination, []),
      returnValueForMissingStub: null);
  @override
  void fetchUsers({bool? gotoNextPage = false}) => super.noSuchMethod(
      Invocation.method(#fetchUsers, [], {#gotoNextPage: gotoNextPage}),
      returnValueForMissingStub: null);
  @override
  void init() => super.noSuchMethod(Invocation.method(#init, []),
      returnValueForMissingStub: null);
  @override
  void setLoading(bool? val) =>
      super.noSuchMethod(Invocation.method(#setLoading, [val]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
